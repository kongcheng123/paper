<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_9.htm">尾页</a>
页码：3/9页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">100</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Android组件有最基本常见的四大组件，Activity是其中之一。</span><span class='green'>Activity是用来和用户交互的，用户可以使用Activity来交互实现某项任务。</span><a href='../sentence_detail/191/191.htm' target='right' class='orange' >在Android开发中，创建Activity后，用户通过调用setContentView()方法，系统会在这个Activity里指定一个布局界面View，这个界面的作用就是给用户进行交互。</a><span class='green'>Android系统中管理Activity是通过操作Activity栈来实现的，而Activity管理自己则是通过Activity自带生命周期的方法来进行操作的。</span><span class='green'>下面就讲述了Activity的生命周期的大体过程。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">101</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.</span><span class='green'>onCreate()：</span><span class='green'>Activity在第一次被创建时，会调用该方法。</span><span class='green'>在这个方法里，你需要将一些初始化的操作完成：</span><span class='green'>加载View，数据绑定到事件等。</span><span class='green'>如果是第一次创建，接下去会调用onStart()方法，如果是停止后重新显示，那么会调用onRestart()这个方法。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">102</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.</span><span class='green'>onStart()：</span><span class='green'>当前Activity对用户由不可见变为可见时，会调用该方法。</span><span class='green'>当这个方法调用完，会接着调用onResume()这个方法。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">103</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.</span><span class='green'>onResume()：</span><span class='green'>Activity会在用户将要和用户交互时，调用此方法。</span><span class='green'>在进行该方法后，此时的活动会处在运行状态。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">104</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.</span><span class='green'>onPause()：</span><span class='green'>当系统要启用其他活动或者恢复之前活动时，会调用这个方法。</span><span class='green'>onPause()方法启动时，占用系统的资源比如CPU资源，会被回收释放，一些比较重要的数据则会被保留下来。</span><a href='../sentence_detail/212/212.htm' target='right' class='orange' >这个过程需要在极短时间内完成，不然会影响其他活动。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">105</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5.</span><span class='green'>onStop()：</span><span class='green'>当其他活动启动掩盖该Activity，该活动变得不可见时，会调用该方法。</span><span class='green'>这个方法是紧接着onpause()之后执行的。</span><span class='green'>如果当前活动恢复，会启动onRestart()方法；</span><span class='green'>否则，会销毁掉。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">106</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>6.</span><span class='green'>onDestory()：</span><span class='green'>调用该方法，活动会被销毁。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">107</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>7.</span><span class='green'>onRestart()：</span><a href='../sentence_detail/224/224.htm' target='right' class='orange' >当活动由onStop()变得停止状态，需要重新启动时，会调用该方法。</a><span class='green'>调用完后，该活动会恢复运行。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">108</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2. 2 Activity生命周期</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">109</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.3 Android之布局</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">110</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Android里有多种多样的控件，这些控件的有机结合，就可以形成丰富的Android界面。</span><span class='green'>为了让这些控件在界面上按照自己的想法排列，Android引入了多种布局方式。</span><span class='green'>布局是一种容器，它可以放置许多控件，控件的位置可以按照一定规则进行改变，然后就可以将页面变得精美。</span><span class='green'>而且，布局除了放置控件外，还可以在里面嵌套其他布局，通过多种不同的布局，就可以实现比单一布局更加复杂的页面。</span><span class='green'>接下来，详细讲解了四种的基本布局。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">111</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）线性布局--LinearLayout</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">112</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>线性布局，从字面意思理解，就是从上往下一个一个的排列在界面上，就像html中的div标签一样。</span><span class='green'>LinearLayout又可分为两种：</span><span class='green'>垂直布局和水平布局。</span><span class='green'>垂直布局的意思就是，每个元素都是按从上往下的方式排列的，每个元素独占一行；</span><span class='green'>水平布局的意思是，所以元素都在同一行中，每个元素都是从左到右这个顺序进行排列的。</span><span class='green'>在线性布局中，weight也是一个重要属性。</span><span class='green'>在垂直布局时，代表了这个控件占总高度的比重；</span><span class='green'>在水平布局时，代表的是该控件在宽度上占的比重；</span><span class='green'>每个比重相当于该控件的weight除以所有的weight。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">113</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）帧布局--FrameLayout</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">114</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>FrameLayout应该算是所有布局里比较简单的。</span><a href='../sentence_detail/245/245.htm' target='right' class='orange' >在默认情况下，所有的控件将会固定在界面的左上角，每个元素相互覆盖重叠。</a><span class='green'>FrameLayout里提供了一种对其方式layout_gravity，可以设置其为left 或right来实现左对齐，或右对齐。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">115</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）相对布局--RelativeLayout</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">116</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>相对布局就是说，相对于一个元素，可以按照这个元素为参照物，进行排列。</span><span class='green'>可以以父类为参照物，也可以以同级元素为参照物，来进行上下左右各个方面的相对排列，比如居中，右下角等布局。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">117</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（4）百分比布局--PercentFrameLayout</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">118</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>百分比布局是Android为了解决控件大小问题，而引入的。</span><span class='green'>在上面三种布局中，只有线性布局中，有个weight属性可以按比例指定控件的大小。</span><span class='green'>百分比布局针对上面的帧布局和相对布局，分别定义了PerencetFrameLayout和PerencetRelativeLayout，为这两个布局分别提供控制控件大小的功能。</span><span class='green'>需要注意的一点是，这个布局需要自己引入，否则不能使用。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">119</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.4 SQLite数据库</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">120</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>SQLite是Android系统中自带的数据库，无需自己引入。</span><span class='green'>和mysql数据库相比，SQLite虽然比较轻量，但结果却是更快的运行速度，更小的内存使用，在移动设备这种内存本来就不大的设备上使用，非常有优势。</span><a href='../sentence_detail/258/258.htm' target='right' class='orange' >而且，SQLite数据库支持SQL语法，连数据库的ACID特性都完美支持。</a><span class='green'>配置SQLite也非常简单，因为SQlite相当于零配置。</span><span class='green'>但由此也带来了一些缺点，比如并发慢，对数据库进行增删改操作相比而言也比较慢。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">121</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>SQLite数据库分为了三个模块：</span><span class='green'>编译器(Compiler)，虚拟机(Virtual Machine)和后端(Back-End)。</span><span class='green'>编译器的作用是对传进来的sql进行语法检查，如果检查无误，会发送给虚拟机进行处理。</span><span class='green'>虚拟机接收到这些数据后，会解释这些字节码，来进行数据的增删改查操作。</span><span class='green'>而后端则是管理这些数据的，通过B+树，缓存等技术，来更迅速的实现各种操作。</span><span class='green'>下图就是SQLite的架构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">122</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图2.3 SQLite架构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">123</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.3 XMPP协议解析</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">124</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.3.1 XMPP协议简介</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">125</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/270/270.htm' target='right' class='orange' >在当今世界，热门主流的即时通信协议有四种，XMPP协议便是其中之一。</a><span class='green'>XMPP是由Jabber转变而来，是开源的通信协议。</span><span class='green'>它的最大特点便是基于XML实现的 。</span><span class='green'>它有以下优点：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">126</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.</span><span class='green'>XMPP 协议是开源的，任何人都能得到XMPP的源码。</span><span class='green'>经过无数人的验证和修改，XMPP协议变得更加完善，不足之处也在慢慢减少。</span><span class='green'>而且，其开放性也让业界有了统一的规范。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">127</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.</span><span class='green'>XMPP的扩展性非常好。</span><a href='../sentence_detail/280/280.htm' target='right' class='orange' >由于XMPP协议是基于可扩展性标记语言XML的，所以信息在交换时是以XML的格式存在的。</a><span class='green'>XML的使用强化了数据的传输，用元素和属性来描述数据，而不使用其显示方法，致使无论是怎样的数据，都可以保存在信息中，提高了XMPP协议的扩展性。</span><span class='green'>而且比起传统的方式少去了字符串解析步骤，节省了大量时间。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_2.htm">上一页</a>
<a class="pagelink" href="paper_4.htm">下一页</a>
<a class="pagelink" href="paper_9.htm">尾页</a>
页码：3/9页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
